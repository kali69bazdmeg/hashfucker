#!/usr/bin/env php
<?php

	set_time_limit(0);
	ini_set('memory_limit', '132768M');
	ini_set('max_execution_time', 0);
	ini_set('display_errors', true);
	ini_set('display_startup_errors', true);
	error_reporting(E_ALL);

	$szarsagok = [
		"~ Te láttál már pinát, mert én még nem.  ", "~ Ki nyalnám a hugod buzi gyerek.        ",
		"~ Minden etikus köcsög pénzért szopik.   ", "~ Kurva anyádért törsz hash-t? Bazd meg. ",
		"~ Csak illegális célokra használd.       ", "~ Azt vallod magadénak, amit megengednek?",
		"~ Amíg itt vagy, addig basszák a nődet.  ", "~ Mi a retkes fasz van bazd meg?         ",
		"~ Van lány testvéred? Ha igen, jó csaj?  ", "~ Egyedül fogsz megdögleni a kurva anyád."
	];

	$mess = $szarsagok[random_int(0, count($szarsagok) - 1)];

	$logo = <<< "END"
	 _   _           _       _____           _                     _
	| | | | __ _ ___| |__   |  ___|   _  ___| | _____ _ __  __   _/ |
	| |_| |/ _` / __| '_ \  | |_ | | | |/ __| |/ / _ \ `__| \ \ / / |
	|  _  | (_| \__ \ | | | |  _|| |_| | (__|   <  __/ |     \ V /| |
	|_| |_|\__,_|___/_| |_| |_|   \__,_|\___|_|\_\___|_|      \_(_)_|
	$mess  Author: Anonymous Kali
	END;

	printf("%s\n\n", "\e[1;33m$logo\e[0m");

	$o = "H:h:w:i:n::r:";
	$options = ["hashlist:", "hash:", "wordlist:", "hashtype:", "report:"];
	$command = getopt($o, $options);

	if ((isset($command["hashlist"]) || isset($command["hash"]) || isset($command["H"]) || isset($command["h"])) && (isset($command["wordlist"]) || isset($command["w"])) && (isset($command["hashtype"])) || isset($command["i"])) {

		printf("%s", "Vársz...");

		if (isset($command["wordlist"])) {
			if (is_string($command["wordlist"])) {
				if (file_exists($command["wordlist"])) {
					if (is_file($command["wordlist"])) {
						$wordlines = file($command["wordlist"]);

						if (count($wordlines) === 0) {
							printf("\r%s \e[0;31m%s\e[0m %s\n", "--wordlist", $command["wordlines"], ") Egy sor nincs ebben a fájlban bazd meg");
							die();
						}
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "--wordlist", $command["wordlist"], ") Szöveges fájl kéne bazd meg.");
						die();
					}
				}
				else {
					printf("\r%s \e[0;31m%s\e[0m %s\n", "--wordlist", $command["wordlist"], ") Nincs ilyen fájl, buzi gyerek.");
					die();
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["wordlist"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "--wordlist", $command["wordlist"][$i]);
				}
				die();
			}
		}
		elseif (isset($command["w"])) {
			if (is_string($command["w"])) {
				if (file_exists($command["w"])) {
					if (is_file($command["w"])) {
						$wordlines = file($command["w"]);

						if (count($wordlines) === 0) {
							printf("\r%s \e[0;31m%s\e[0m %s\n", "-w", $command["w"], ") Egy sor nincs ebben a fájlban bazd meg");
							die();
						}
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "-w", $command["w"], ") Szöveges fájl kéne bazd meg.");
						die();
					}
				}
				else {
					printf("\r%s \e[0;31m%s\e[0m %s\n", "-w", $command["w"], ") Nincs ilyen fájl, buzi gyerek.");
					die();
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["w"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "-w", $command["w"][$i]);
				}
				die();
			}
		}

		if (isset($command["hashlist"])) {
			if (is_string($command["hashlist"])) {
				if (file_exists($command["hashlist"])) {
					if (is_file($command["hashlist"])) {
						$hashlines = file($command["hashlist"]);

						if (count($hashlines) === 0) {
							printf("\r%s \e[0;31m%s\e[0m %s\n", "--hashlist", $command["hashlist"], ") Egy sor nincs ebben a fájlban bazd meg");
							die();
						}
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "--hashlist", $command["hashlist"], ") Szöveges fájl kéne bazd meg.");
						die();
					}
				}
				else {
					printf("\r%s \e[0;31m%s\e[0m %s\n", "--hashlist", $command["hashlist"], ") Nincs ilyen fájl, buzi gyerek.");
					die();
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["hashlist"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "--hashlist", $command["hashlist"][$i]);
				}
				die();
			}
		}
		elseif (isset($command["H"])) {
			if (is_string($command["H"])) {
				if (file_exists($command["H"])) {
					if (is_file($command["H"])) {
						$hashlines = file($command["H"]);

						if (count($hashlines) === 0) {
							printf("\r%s \e[0;31m%s\e[0m %s\n", "-H", $command["H"], ") Egy sor nincs ebben a fájlban bazd meg.");
							die();
						}
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "-H", $command["H"], "Szöveges fájl kéne bazd meg.");
						die();
					}
				}
				else {
					printf("\r\e[0;31m%s\e[0m %s\n", "--hashlist", $command["H"], "Nincs ilyen fájl, buzi gyerek.");
					die();
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["H"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "-H ", $command["H"][$i]);
				}
				die();
			}
		}
		elseif (isset($command["hash"])) {
			if (is_string($command["hash"])) {
				if (!file_exists($command["hash"])) {
					if (!is_file($command["hash"])) {
						$hashlines = [$command["hash"]];
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "--hash", $command["hash"], ") Nem fájl kéne buzi gyerek, hanem maga a hash.");
						die();
					}
				}
				else {
					if (is_file($command["hash"])) {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "--hash", $command["hash"], ") Nem fájl kéne buzi gyerek, hanem maga a hash.");
						die();
					}

					if (is_dir($command["hash"])) {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "--hash", $command["hash"], ") Nem mappa kéne buzi gyerek, hanem maga a hash.");
						die();
					}
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["hash"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "--hash", $command["hash"][$i]);
				}
				die();
			}
		}
		elseif (isset($command["h"])) {
			if (is_string($command["h"])) {
				if (!file_exists($command["h"])) {
					if (!is_file($command["h"])) {
						$hashlines = [$command["h"]];
					}
					else {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "-h", $command["h"], ") Nem fájl kéne buzi gyerek, hanem maga a hash.");
						die();
					}
				}
				else {
					if (is_file($command["h"])) {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "-h", $command["h"], ") Nem fájl kéne buzi gyerek, hanem maga a hash.");
						die();
					}

					if (is_dir($command["h"])) {
						printf("\r%s \e[0;31m%s\e[0m %s\n", "-h", $command["h"], ") Nem mappa kéne buzi gyerek, hanem maga a hash.");
						die();
					}
				}
			}
			else {
				printf("\r%s\n", "Ezekből tőbb van mint kéne:");
				for ($i = 0; $i < count($command["h"]); $i++) {
					printf(" %s \e[0;31m%s\e[0m\n", "-h", $command["h"][$i]);
				}
				die();
			}
		}

		if (isset($command["i"]) && $command["i"] === "auto" || isset($command["hashtype"]) && $command["hashtype"] === "auto") {
			$autodetect = true;
		}
		elseif (isset($command["i"]) && $command["i"] === "crypt" || isset($command["hashtype"]) && $command["hashtype"] === "crypt") {
			$crypt = true;
		}
		elseif (isset($command["i"]) || isset($command["hashtype"])) {
			if (isset($command["i"])) {
				if (is_string($command["i"])) {
					$hashtype = $command["i"];
				}
				else {
					printf("\r%s\n", "Ezekből tőbb van mint kéne:");
					for ($i = 0; $i < count($command["i"]); $i++) {
						printf(" \e[0;31m%se[0m\n", "-i" . $command["i"][$i]);
					}
					die();
				}
			}
			else {
				if (is_string($command["hashtype"])) {
					$hashtype = $command["hashtype"];
				}
				else {
					printf("\r%s\n", "Ezekből tőbb van mint kéne:");
					for ($i = 0; $i < count($command["hashtype"]); $i++) {
						printf(" \e[0;31m%se[0m\n", "--hashtype" . $command["hashtype"][$i]);
					}
					die();
				}
			}

			foreach (hash_algos() as $hashid) {
				if (isset($hashtype) && $hashtype === $hashid) {
					$hashtype_exists = true;
					break;
				}
			}

			if (!isset($hashtype_exists)) {
				printf("\r\e[0;31m%s\e[0m %s\n", $hashtype, "Nincs ilyen hash tipus buzi gyerek.");
				die();
			}
		}

		$hashtable = [
			8   => ["adler32", "crc32", "crc32b", "crc32c", "fnv132", "fnv1a32", "joaat"],
			16  => ["fnv164", "fnv1a64"],
			32  => ["md2", "md4", "md5", "ripemd128", "tiger128,3", "tiger128,4", "haval128,3", "haval128,4", "haval128,5"],
			40  => ["sha1", "ripemd160", "tiger160,3", "tiger160,4", "haval160,3", "haval160,4", "haval160,5"],
			48  => ["tiger192,3", "tiger192,4", "haval192,3", "haval192,4", "haval192,5"],
			56  => ["sha224", "sha512/224", "sha3-224", "haval224,3", "haval224,4", "haval224,5"],
			64  => ["sha256", "sha512/256", "sha3-256", "ripemd256", "snefru", "snefru256", "gost", "gost-crypto", "haval256,3", "haval256,4", "haval256,5"],
			80  => ["ripemd320"],
			96  => ["sha384", "sha3-384"],
			128 => ["sha512", "sha3-512", "whirlpool"],
		];

		$hashlines = array_unique($hashlines);
		$hashlines = array_values($hashlines);
		$wordlines = array_unique($wordlines);
		$wordlines = array_values($wordlines);

		$report_data = [];

		$run_time = microtime(true);

		$l = 0;
		for ($i = 0; $i < count($hashlines); $i++) {
			$hash = str_replace("\n", "", $hashlines[$i]);

			if (strlen($hash) < 8) {
				continue;
			}

			$cracked = false;

			for ($j = 0; $j < count($wordlines); $j = $j + 16) {

				$word1 = $word2  = $word3  = $word4  = $word5  = $word6  = $word7  = $word8  = 69;
				$word9 = $word10 = $word11 = $word12 = $word13 = $word14 = $word15 = $word16 = 69;

				if ($j +  0 < count($wordlines)) {  $word1 = str_replace("\n", "", $wordlines[$j +  0]); }
				if ($j +  1 < count($wordlines)) {  $word2 = str_replace("\n", "", $wordlines[$j +  1]); }
				if ($j +  2 < count($wordlines)) {  $word3 = str_replace("\n", "", $wordlines[$j +  2]); }
				if ($j +  3 < count($wordlines)) {  $word4 = str_replace("\n", "", $wordlines[$j +  3]); }
				if ($j +  4 < count($wordlines)) {  $word5 = str_replace("\n", "", $wordlines[$j +  4]); }
				if ($j +  5 < count($wordlines)) {  $word6 = str_replace("\n", "", $wordlines[$j +  5]); }
				if ($j +  6 < count($wordlines)) {  $word7 = str_replace("\n", "", $wordlines[$j +  6]); }
				if ($j +  7 < count($wordlines)) {  $word8 = str_replace("\n", "", $wordlines[$j +  7]); }
				if ($j +  8 < count($wordlines)) {  $word9 = str_replace("\n", "", $wordlines[$j +  8]); }
				if ($j +  9 < count($wordlines)) { $word10 = str_replace("\n", "", $wordlines[$j +  9]); }
				if ($j + 10 < count($wordlines)) { $word11 = str_replace("\n", "", $wordlines[$j + 10]); }
				if ($j + 11 < count($wordlines)) { $word12 = str_replace("\n", "", $wordlines[$j + 11]); }
				if ($j + 12 < count($wordlines)) { $word13 = str_replace("\n", "", $wordlines[$j + 12]); }
				if ($j + 13 < count($wordlines)) { $word14 = str_replace("\n", "", $wordlines[$j + 13]); }
				if ($j + 14 < count($wordlines)) { $word15 = str_replace("\n", "", $wordlines[$j + 14]); }
				if ($j + 15 < count($wordlines)) { $word16 = str_replace("\n", "", $wordlines[$j + 15]); }

				if (isset($autodetect) && $autodetect === true) {
					$len = strlen($hash);

					if ($len === 8 || $len === 16 || $len === 32 || $len === 40 || $len === 48 || $len === 56 || $len === 64 || $len === 80 || $len === 96 || $len === 128) {
						for ($k = 0; $k < count($hashtable[$len]); $k++) {
							$hashtype = $hashtable[$len][$k];

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word1) && is_string($word1) && $hash === hash($hashtype, $word1)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word1, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word1 . " : " . $hashtype);
								$word1 = 69;
								break;
							}

							if (is_string($word1)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word2) && is_string($word2) && $hash === hash($hashtype, $word2)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word2, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word2 . " : " . $hashtype);
								$word2 = 69;
								break;
							}

							if (is_string($word2)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word3) && is_string($word3) && $hash === hash($hashtype, $word3)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word3, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word3 . " : " . $hashtype);
								$word3 = 69;
								break;
							}

							if (is_string($word3)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word4) && is_string($word4) && $hash === hash($hashtype, $word4)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word4, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word4 . " : " . $hashtype);
								$word4 = 69;
								break;
							}

							if (is_string($word4)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word5) && is_string($word5) && $hash === hash($hashtype, $word5)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word5, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word5 . " : " . $hashtype);
								$word5 = 69;
								break;
							}

							if (is_string($word5)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word6) && is_string($word6) && $hash === hash($hashtype, $word6)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word6, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word6 . " : " . $hashtype);
								$word6 = 69;
								break;
							}

							if (is_string($word6)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word7) && is_string($word7) && $hash === hash($hashtype, $word7)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word7, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word7 . " : " . $hashtype);
								$word7 = 69;
								break;
							}

							if (is_string($word7)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word8) && is_string($word8) && $hash === hash($hashtype, $word8)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word8, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word8 . " : " . $hashtype);
								$word8 = 69;
								break;
							}

							if (is_string($word8)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word9) && is_string($word9) && $hash === hash($hashtype, $word9)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word9, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word9 . " : " . $hashtype);
								$word9 = 69;
								break;
							}

							if (is_string($word9)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word10) && is_string($word10) && $hash === hash($hashtype, $word10)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word10, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word10 . " : " . $hashtype);
								$word10 = 69;
								break;
							}

							if (is_string($word10)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word11) && is_string($word11) && $hash === hash($hashtype, $word11)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word11, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word11 . " : " . $hashtype);
								$word11 = 69;
								break;
							}

							if (is_string($word11)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word12) && is_string($word12) && $hash === hash($hashtype, $word12)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word12, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word12 . " : " . $hashtype);
								$word12 = 69;
								break;
							}

							if (is_string($word12)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word13) && is_string($word13) && $hash === hash($hashtype, $word13)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word13, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word13 . " : " . $hashtype);
								$word13 = 69;
								break;
							}

							if (is_string($word13)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word14) && is_string($word14) && $hash === hash($hashtype, $word14)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word14, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word14 . " : " . $hashtype);
								$word14 = 69;
								break;
							}

							if (is_string($word14)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word15) && is_string($word15) && $hash === hash($hashtype, $word15)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word15, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word15 . " : " . $hashtype);
								$word15 = 69;
								break;
							}

							if (is_string($word15)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

							if (isset($word16) && is_string($word16) && $hash === hash($hashtype, $word16)) {
								printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word16, ":", $hashtype);
								$cracked = true;
								array_push($report_data, $hash . " : " . $word16 . " : " . $hashtype);
								$word16 = 69;
								break;
							}

							if (is_string($word16)) {
								$l++;
							}

							$status = $l . " of " . count($hashlines) * count($wordlines) * count($hashtable[$len]);
							printf("\r\e[1;36m%s\e[0m", $status);

						}
					}
					elseif ($hash[0].$hash[1] === "\$1" || $hash[0].$hash[1] === "\$2"  || $hash[0].$hash[1] === "\$sh" || $hash[0].$hash[1] === "\$5" || $hash[0].$hash[1] === "\$6") {
						if ($hash[0].$hash[1] === "\$1") { $hashtype = "md5 crypt"; }
						elseif ($hash[0].$hash[1] === "\$2") { $hashtype = "bcrypt"; }
						elseif ($hash[0].$hash[1].$hash[2].$hash[4].$hash[5] === "\$sha1") { $hashtype = "sha1 crypt"; }
						elseif ($hash[0].$hash[1] === "\$5") { $hashtype = "sha256 crypt"; }
						elseif ($hash[0].$hash[1] === "\$6") { $hashtype = "sha512 crypt"; }
						else { $hashtype = "tudja a geci"; }

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word1) && is_string($word1) && password_verify($word1, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word1, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word1 . " : " . $hashtype);
							$word1 = 69;
							break;
						}

						if (is_string($word1)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word2) && is_string($word2) && password_verify($word2, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word2, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word2 . " : " . $hashtype);
							$word2 = 69;
							break;
						}

						if (is_string($word2)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word3) && is_string($word3) && password_verify($word3, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word3, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word3 . " : " . $hashtype);
							$word3 = 69;
							break;
						}

						if (is_string($word3)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word4) && is_string($word4) && password_verify($word4, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word4, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word4 . " : " . $hashtype);
							$word4 = 69;
							break;
						}

						if (is_string($word4)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word5) && is_string($word5) && password_verify($word5, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word5, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word5 . " : " . $hashtype);
							$word5 = 69;
							break;
						}

						if (is_string($word5)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word6) && is_string($word6) && password_verify($word6, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word6, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word6 . " : " . $hashtype);
							$word6 = 69;
							break;
						}

						if (is_string($word6)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word7) && is_string($word7) && password_verify($word7, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word7, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word7 . " : " . $hashtype);
							$word7 = 69;
							break;
						}

						if (is_string($word7)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word8) && is_string($word8) && password_verify($word8, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word8, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word8 . " : " . $hashtype);
							$word8 = 69;
							break;
						}

						if (is_string($word8)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word9) && is_string($word9) && password_verify($word9, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word9, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word9 . " : " . $hashtype);
							$word9 = 69;
							break;
						}

						if (is_string($word9)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word10) && is_string($word10) && password_verify($word10, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word10, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word10 . " : " . $hashtype);
							$word10 = 69;
							break;
						}

						if (is_string($word10)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word11) && is_string($word11) && password_verify($word11, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word11, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word11 . " : " . $hashtype);
							$word11 = 69;
							break;
						}

						if (is_string($word11)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word12) && is_string($word12) && password_verify($word12, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word12, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word12 . " : " . $hashtype);
							$word12 = 69;
							break;
						}

						if (is_string($word12)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word13) && is_string($word13) && password_verify($word13, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word13, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word13 . " : " . $hashtype);
							$word13 = 69;
							break;
						}

						if (is_string($word13)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word14) && is_string($word14) && password_verify($word14, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word14, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word14 . " : " . $hashtype);
							$word14 = 69;
							break;
						}

						if (is_string($word14)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word15) && is_string($word15) && password_verify($word15, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word15, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word15 . " : " . $hashtype);
							$word15 = 69;
							break;
						}

						if (is_string($word15)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word16) && is_string($word16) && password_verify($word16, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word16, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word16 . " : " . $hashtype);
							$word16 = 69;
							break;
						}

						if (is_string($word16)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

					}
					else {
						printf("\r%s\n", "Nem tudok ilyen hash-t törni vagy elbasztál valamit bazd meg.");
						if (count($hashlines) === 1) { die(); } else { break; }
					}

					if (isset($autodetect) && $autodetect === true && $cracked === true) {
						break;
					}

				}
				else {
					if (isset($crypt) && $crypt === true) {
						if ($hash[0].$hash[1] === "$1") { $hashtype = "md5 crypt"; }
						elseif ($hash[0].$hash[1] === "$2") { $hashtype = "bcrypt"; }
						elseif ($hash[0].$hash[1].$hash[2].$hash[4].$hash[5] === "\$sha1") { $hashtype = "sha1 crypt"; }
						elseif ($hash[0].$hash[1] === "$5") { $hashtype = "sha256 crypt"; }
						elseif ($hash[0].$hash[1] === "$6") { $hashtype = "sha512 crypt"; }
						else { $hashtype = "tudja a geci"; }

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word1) && is_string($word1) && password_verify($word1, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word1, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word1 . " : " . $hashtype);
							$word1 = 69;
							break;
						}

						if (is_string($word1)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word2) && is_string($word2) && password_verify($word2, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word2, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word2 . " : " . $hashtype);
							$word2 = 69;
							break;
						}

						if (is_string($word2)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word3) && is_string($word3) && password_verify($word3, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word3, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word3 . " : " . $hashtype);
							$word3 = 69;
							break;
						}

						if (is_string($word3)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word4) && is_string($word4) && password_verify($word4, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word4, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word4 . " : " . $hashtype);
							$word4 = 69;
							break;
						}

						if (is_string($word4)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word5) && is_string($word5) && password_verify($word5, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word5, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word5 . " : " . $hashtype);
							$word5 = 69;
							break;
						}

						if (is_string($word5)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word6) && is_string($word6) && password_verify($word6, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word6, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word6 . " : " . $hashtype);
							$word6 = 69;
							break;
						}

						if (is_string($word6)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word7) && is_string($word7) && password_verify($word7, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word7, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word7 . " : " . $hashtype);
							$word7 = 69;
							break;
						}

						if (is_string($word7)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word8) && is_string($word8) && password_verify($word8, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word8, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word8 . " : " . $hashtype);
							$word8 = 69;
							break;
						}

						if (is_string($word8)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word9) && is_string($word9) && password_verify($word9, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word9, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word9 . " : " . $hashtype);
							$word9 = 69;
							break;
						}

						if (is_string($word9)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word10) && is_string($word10) && password_verify($word10, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word10, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word10 . " : " . $hashtype);
							$word10 = 69;
							break;
						}

						if (is_string($word10)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word11) && is_string($word11) && password_verify($word11, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word11, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word11 . " : " . $hashtype);
							$word11 = 69;
							break;
						}

						if (is_string($word11)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word12) && is_string($word12) && password_verify($word12, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word12, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word12 . " : " . $hashtype);
							$word12 = 69;
							break;
						}

						if (is_string($word12)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word13) && is_string($word13) && password_verify($word13, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word13, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word13 . " : " . $hashtype);
							$word13 = 69;
							break;
						}

						if (is_string($word13)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word14) && is_string($word14) && password_verify($word14, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word14, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word14 . " : " . $hashtype);
							$word14 = 69;
							break;
						}

						if (is_string($word14)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word15) && is_string($word15) && password_verify($word15, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word15, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word15 . " : " . $hashtype);
							$word15 = 69;
							break;
						}

						if (is_string($word15)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word16) && is_string($word16) && password_verify($word16, $hash)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word16, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word16 . " : " . $hashtype);
							$word16 = 69;
							break;
						}

						if (is_string($word16)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

					}
					else {

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word1) && is_string($word1) && $hash === hash($hashtype, $word1)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word1, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word1 . " : " . $hashtype);
							$word1 = 69;
							break;
						}

						if (is_string($word1)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word2) && is_string($word2) && $hash === hash($hashtype, $word2)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word2, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word2 . " : " . $hashtype);
							$word2 = 69;
							break;
						}

						if (is_string($word2)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word3) && is_string($word3) && $hash === hash($hashtype, $word3)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word3, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word3 . " : " . $hashtype);
							$word3 = 69;
							break;
						}

						if (is_string($word3)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word4) && is_string($word4) && $hash === hash($hashtype, $word4)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word4, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word4 . " : " . $hashtype);
							$word4 = 69;
							break;
						}

						if (is_string($word4)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word5) && is_string($word5) && $hash === hash($hashtype, $word5)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word5, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word5 . " : " . $hashtype);
							$word5 = 69;
							break;
						}

						if (is_string($word5)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word6) && is_string($word6) && $hash === hash($hashtype, $word6)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word6, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word6 . " : " . $hashtype);
							$word6 = 69;
							break;
						}

						if (is_string($word6)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word7) && is_string($word7) && $hash === hash($hashtype, $word7)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word7, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word7 . " : " . $hashtype);
							$word7 = 69;
							break;
						}

						if (is_string($word7)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word8) && is_string($word8) && $hash === hash($hashtype, $word8)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word8, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word8 . " : " . $hashtype);
							$word8 = 69;
							break;
						}

						if (is_string($word8)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word9) && is_string($word9) && $hash === hash($hashtype, $word9)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word9, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word9 . " : " . $hashtype);
							$word9 = 69;
							break;
						}

						if (is_string($word9)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word10) && is_string($word10) && $hash === hash($hashtype, $word10)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word10, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word10 . " : " . $hashtype);
							$word10 = 69;
							break;
						}

						if (is_string($word10)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word11) && is_string($word11) && $hash === hash($hashtype, $word11)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word11, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word11 . " : " . $hashtype);
							$word11 = 69;
							break;
						}

						if (is_string($word11)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word12) && is_string($word12) && $hash === hash($hashtype, $word12)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word12, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word12 . " : " . $hashtype);
							$word12 = 69;
							break;
						}

						if (is_string($word12)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word13) && is_string($word13) && $hash === hash($hashtype, $word13)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word13, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word13 . " : " . $hashtype);
							$word13 = 69;
							break;
						}

						if (is_string($word13)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word14) && is_string($word14) && $hash === hash($hashtype, $word14)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word14, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word14 . " : " . $hashtype);
							$word14 = 69;
							break;
						}

						if (is_string($word14)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word15) && is_string($word15) && $hash === hash($hashtype, $word15)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word15, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word15 . " : " . $hashtype);
							$word15 = 69;
							break;
						}

						if (is_string($word15)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

						if (isset($word16) && is_string($word16) && $hash === hash($hashtype, $word16)) {
							printf("\r\e[1;34m%s \e[1;36m%s \e[0;32m%s \e[1;36m%s \e[1;33m%s\e[0m\n", $hash, ":", $word16, ":", $hashtype);
							$cracked = true;
							array_push($report_data, $hash . " : " . $word16 . " : " . $hashtype);
							$word16 = 69;
							break;
						}

						if (is_string($word16)) {
							$l++;
						}

						$status = $l . " of " . count($hashlines) * count($wordlines);
						printf("\r\e[1;36m%s\e[0m", $status);

					}
				}
			}

			if (isset($command["n"]) && $command["n"] === false) {
				if (isset($cracked) && $cracked === false) {
					printf("\r\e[1;34m%s \e[1;36m%s \e[0;31m%s\e[0m\n", $hash, ":", "hash not cracked");
				}
			}
		}

		$run_time = substr(strval((microtime(true) - $run_time) * 1000), 0, 6);

		if (!isset($status)) {
			$status = "0 of " . count($wordlines);
		}

		printf("\r\e[1;36m%s\e[0m %s \e[1;33m%s\e[0m %s\n", $status, "/", $run_time . "ms", "/");
		array_push($report_data, $status . " / " . $run_time . " /");

		if (isset($command["r"]) || isset($command["report"])) {
			if (1 < count($report_data)) {
				if (isset($command["r"]) && 0 < strlen($command["r"])) {
					$file = $command["r"];
				}
				elseif (isset($command["report"]) && 0 < strlen($command["report"])){
					$file = $command["report"];
				}

				$report_file = fopen($file, 'a+');
				fwrite($report_file, $logo . "\nDate: " . date("Y:m:d H:i:s") . "\n\n");
				foreach ($report_data as $sort) {
					fwrite($report_file, trim($sort) . "\n");
				}
				fclose($report_file);
			}
			else {
				printf("%s\n", "Nincs mit beleverni a fájlba bazd meg.");
			}
		}
	}
	else {
		$help = <<< "END"
		-H, --hashlist       Hash-eket vagy hash-t tartalmazó fájl.
		-h, --hash           Csak simán a hash-t baszasd oda geci.
		-i, --hashtype       auto, crypt, vagy a hash Típusa.
		-r, --report         Megbaszott hash-eket bele gecizi egy fájlba.
		-n                   Nem sikeres törés esetén "hash not cracked" üzenet.

		 Amiket meg tud baszni a cucc:
		 md2; md4; md5; sha1; sha224; sha256; sha384; sha512/224; sha512/256; sha512; sha3-224
		 sha3-256; sha3-384; sha3-512; ripemd128; ripemd160; ripemd256; ripemd320; whirlpool
		 tiger128,3; tiger160,3; tiger192,3; tiger128,4; tiger160,4; tiger192,4; snefru
		 snefru256; gost; gost-crypto; adler32; crc32; crc32b; crc32c; fnv132; fnv1a32; fnv164
		 fnv1a64; joaat; haval128,3; haval160,3; haval192,3; haval224,3; haval256,3; haval128,4
		 haval160,4; haval192,4; haval224,4; haval256,4; haval128,5; haval160,5; haval192,5
		 haval224,5; haval256,5; md5crypt; bcrypt; sha1crypt; sha256crypt; sha512crypt;

		Így csapasd:
		 - hashfucker --hashlist hash.txt --wordlist john.lst --hashtype auto --report pina.txt
		 - hashfucker -h '\$1\$dJ6uyylQ\$ha.xgdgpirf5nE/TbxnNg1' -w rockyou.txt -i crypt -n
		END;

		printf("\e[1;36m%s\e[0m\n", $help);
	}

?>
